-- Create the llm_logs table
CREATE TABLE public.llm_logs (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    user_id uuid NULL REFERENCES auth.users(id) ON DELETE SET NULL,
    email_interaction_id uuid NULL REFERENCES public.email_interactions(id) ON DELETE SET NULL,
    prompt_messages jsonb NOT NULL,
    llm_response jsonb NOT NULL,
    tool_plan_generated jsonb NULL,
    model_used text NOT NULL,
    error_message text NULL
);

-- Add comments to the table and columns for better understanding
COMMENT ON TABLE public.llm_logs IS 'Stores logs of interactions with Large Language Models (LLMs), including prompts, responses, and any errors.';
COMMENT ON COLUMN public.llm_logs.id IS 'Unique identifier for the log entry.';
COMMENT ON COLUMN public.llm_logs.created_at IS 'Timestamp of when the log entry was created.';
COMMENT ON COLUMN public.llm_logs.user_id IS 'Identifier of the user associated with this LLM interaction, if applicable. References auth.users.';
COMMENT ON COLUMN public.llm_logs.email_interaction_id IS 'Identifier of the email interaction related to this LLM call, if applicable. References public.email_interactions.';
COMMENT ON COLUMN public.llm_logs.prompt_messages IS 'The full prompt or messages sent to the LLM.';
COMMENT ON COLUMN public.llm_logs.llm_response IS 'The full response received from the LLM.';
COMMENT ON COLUMN public.llm_logs.tool_plan_generated IS 'The structured tool plan generated by the LLM, if applicable.';
COMMENT ON COLUMN public.llm_logs.model_used IS 'The name or identifier of the LLM used (e.g., "gemini-1.5-pro").';
COMMENT ON COLUMN public.llm_logs.error_message IS 'Any error message captured during the LLM interaction or processing.';

-- Create indexes for frequently queried columns
CREATE INDEX idx_llm_logs_user_id ON public.llm_logs(user_id);
CREATE INDEX idx_llm_logs_email_interaction_id ON public.llm_logs(email_interaction_id);
CREATE INDEX idx_llm_logs_created_at ON public.llm_logs(created_at DESC); -- अक्सर नवीनतम लॉग पहले देखे जाते हैं
CREATE INDEX idx_llm_logs_model_used ON public.llm_logs(model_used);

-- Enable Row Level Security (RLS) for the table
ALTER TABLE public.llm_logs ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Allow users to SELECT their own log records
CREATE POLICY "Allow users to SELECT their own log records"
ON public.llm_logs
FOR SELECT
TO authenticated -- Or specify a more restrictive role if needed
USING (auth.uid() = user_id);

-- Allow service roles all access (INSERT, SELECT, UPDATE, DELETE)
-- This is necessary for Supabase internal operations and for inserts from server-side functions using the service_role key.
CREATE POLICY "Allow service_role full access"
ON public.llm_logs
FOR ALL
TO service_role
USING (true)
WITH CHECK (true);

-- Grant usage on schema and table to relevant roles if not already covered
-- For authenticated users to be able to select their own logs (as per policy)
GRANT SELECT ON TABLE public.llm_logs TO authenticated;
-- For service_role (used by Edge Functions) to insert/select/update/delete as per policy
GRANT ALL ON TABLE public.llm_logs TO service_role;
GRANT ALL ON SEQUENCE llm_logs_id_seq TO service_role; -- If using default sequence for ID, though gen_random_uuid() doesn't use a sequence explicitly named this way. For gen_random_uuid, this is not needed.

-- Note: If your Supabase instance has default grants that are more permissive,
-- these explicit grants might not be strictly necessary but are good for clarity.
-- The RLS policies are the primary mechanism for controlling access.
-- The `llm_logs_id_seq` grant is likely not needed because `id uuid PRIMARY KEY DEFAULT gen_random_uuid()` does not use a traditional sequence.
-- Removing the sequence grant for clarity as it's not applicable.
-- GRANT ALL ON SEQUENCE llm_logs_id_seq TO service_role;
